#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('itsYours:server');
var http = require('http');
const { Chatroom, ChatMessage } = require('../src/models/index');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '4000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
	var port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}

	var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			console.error(bind + ' requires elevated privileges');
			process.exit(1);
			break;
		case 'EADDRINUSE':
			console.error(bind + ' is already in use');
			process.exit(1);
			break;
		default:
			throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
	var addr = server.address();
	var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
	debug('Listening on ' + bind);
}

const { Server } = require('socket.io');
const cors = require('cors');

app.use(cors());

const io = new Server(server, {
	cors: {
		origin: '*',
		method: ['GET', 'POST'],
	},
});

io.on('connection', socket => {
	// console.log(`User Connected:: ${socket.id}`);
	//채팅방 참여 & 채팅방 생성정보 저장
	socket.on('ask_join', async data => {
		console.log('data::', data);
		// 여기에 if문 돌려서 현재 로그인하고 채팅방에 들어가려는 사람이 채팅방 정보에 있는 사람인지 판별해줘야 함
		socket.join(data.roomNum); // 채팅방에 유저 넣어주기
		console.log(`User with ID: ${socket.id} joined room: ${data.roomNum}`);

		// try {
		// 	const newChatroom = new Chatroom({
		// 		productId: data._id,
		// 		buyerId: req.user.id,
		// 		sellerId: data.sellerId,
		// 		isActivated: true,
		// 	});
		// 	await newChatroom.save();
		// 	console.log('제발 저장되게해주세요.');
		// } catch (error) {
		// 	console.error('에러가났어요:', error);
		// }

		//메세지 보내기
		// socket.on('send_message', async data => {
		// 	console.log(data.message);
		// 	try {
		// 		const newMessage = new ChatMessage({
		// 			chatRoomId: data.chatRoomId,
		// 			content: data.content,
		// 			chatAuth: data.chatAuth,
		// 		});
		// 		await newMessage.save();
		// 		console.log(data);
		// 		socket.broadcast.emit('receive_message', data);
		// 	} catch (err) {
		// 		console.error('Error saving message:', err);
		// 	}
		// });

		//채팅방 나가기
		// socket.on('disconnect', chatId => {
		// 	console.log(`exit chat`);
		// 	socket.leave(chatId);
		// });
	});

	//메세지 보내기
	socket.on('send_message', data => {
		console.log(data);
		// 여기에 보낸 채팅 저장하는 로직필요
		socket.to(data.roomNum).emit('message_broadcast', { message: data.message });
	});

	//채팅방 나가기
	// socket.on('disconnect', chatId => {
	// 	console.log(`exit chat`);
	// 	socket.leave(chatId);
	// });
});
